let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/.config/nvim/lua/rawdikk
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +9 ~/projects/agilix/packages/web/src/pages/printDocuments/index.tsx
badd +31 ~/projects/agilix/packages/agitest/cypress/e2e/printLists.cy.ts
badd +46 ~/projects/agilix/packages/web/src/constants/routes.ts
badd +8 ~/projects/agilix/package.json
badd +10 ~/projects/agilix/packages/agitest/cypress.config.ts
badd +36 ~/projects/agilix/packages/agitest/cypress/e2e/competitions.cy.ts
badd +58 ~/projects/agilix/packages/web/src/pages/myCompetitions/index.tsx
badd +27 ~/projects/agilix/packages/web/src/pages/myCompetitions/resultDetails.tsx
badd +61 ~/projects/agilix/packages/web/src/pages/myCompetitions/competitionComponent.tsx
argglobal
%argdel
edit ~/projects/agilix/packages/web/src/pages/myCompetitions/competitionComponent.tsx
argglobal
balt ~/projects/agilix/packages/web/src/pages/myCompetitions/resultDetails.tsx
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 61 - ((48 * winheight(0) + 24) / 49)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 61
normal! 0
lcd ~/projects/agilix
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
